name: submodule-updates

on:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # https://crontab.guru/#40_19_*_*_*
    - cron: '40 19 * * *'



jobs:

  check-submodules:

    name: check-submodules-job

    runs-on: ubuntu-latest

    env:
      #
      REPO__CHECKOUT_PATH: 'gharial'
      REPO__TARGET_BRANCH: 'master'
      REPO__SUBMODULE__REL_PATH: 'dependabot_sub_a'
      REPO__SUBMODULE_SHA1: ''
      #
      SUBMODULE_REPO__OWNER: 'coolbreeze413'
      SUBMODULE_REPO__NAME: 'dependabot_sub_a'
      SUBMODULE_REPO__CHECKOUT_PATH: 'dependabot_sub_a'
      SUBMODULE_REPO__TARGET_BRANCH: 'master'
      SUBMODULE_REPO__SHA1: ''
      SUBMODULE_REPO__CHECK_DIR: 'interesting_dir'
      #
      SUBDMODULE_REPO__HAS_NEW_CHANGES: 'no'
      SUBDMODULE_REPO__HAS_NEW_CHANGES_IN_CHECK_DIR: 'no'
      #
      REPO__SUBMODULE_UPDATE_PR_CREATE: 'no'
      REPO__SUBMODULE_UPDATE_PR_SUPERSEDE: 'no'
      REPO__SUBMODULE_UPDATE_PR_PREV_URL: ''



    steps:

      # checkout our repo
      - name: check out repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.REPO__TARGET_BRANCH }}
          submodules: 'true'
          path: ./${{ env.REPO__CHECKOUT_PATH }}
          fetch-depth: 1 # we only need a shallow clone to get the submodule revision

      # get the revision of the submodule in our repo
      - name: get head rev of submodule in our repo
        run:  |
          cd "${{ env.REPO__CHECKOUT_PATH }}/${{ env.REPO__SUBMODULE__REL_PATH }}"
          echo "repo->submodule: ${PWD}"
          REPO__SUBMODULE_SHA1=$(git rev-parse --short HEAD)
          echo "REPO__SUBMODULE_SHA1=$REPO__SUBMODULE_SHA1" >> $GITHUB_ENV
          echo "REPO__SUBMODULE_SHA1=$REPO__SUBMODULE_SHA1"
          cd -

      # checkout the submodule repo
      - name: checkout submodule repo
        uses: actions/checkout@v2
        with:
          repository: ${{ env.SUBMODULE_REPO__OWNER }}/${{ env.SUBMODULE_REPO__NAME }}
          path: ./${{ env.SUBMODULE_REPO__CHECKOUT_PATH }}
          fetch-depth: 0 # we need all history, not a shallow clone for checking changes

      # get the revision of the submodule repo's HEAD
      - name: get head rev of the submodule repo
        run:  |
          cd ${{ env.SUBMODULE_REPO__CHECKOUT_PATH }}
          echo "submodule's repo : ${PWD}"
          SUBMODULE_REPO__SHA1=$(git rev-parse --short HEAD)
          echo "SUBMODULE_REPO__SHA1=$SUBMODULE_REPO__SHA1" >> $GITHUB_ENV
          echo "SUBMODULE_REPO__SHA1=$SUBMODULE_REPO__SHA1"
          cd -

      # are there any differences between submodule repo HEAD and our repo submodule rev
      - name: check if submodule repo has new changes
        if:  ${{ env.SUBMODULE_REPO__SHA1 != env.REPO__SUBMODULE_SHA1 }}
        run:  |
          SUBDMODULE_REPO__HAS_NEW_CHANGES="yes"
          echo "SUBDMODULE_REPO__HAS_NEW_CHANGES=$SUBDMODULE_REPO__HAS_NEW_CHANGES" >> $GITHUB_ENV
          echo "SUBDMODULE_REPO__HAS_NEW_CHANGES=$SUBDMODULE_REPO__HAS_NEW_CHANGES"


      # are there differences in a specific dir in the submodule repo
      - name: check if there are changes in the specific dir that we are looking for
        if: ${{ env.SUBDMODULE_REPO__HAS_NEW_CHANGES == 'yes' }}
        run:  |
          cd ${{ env.SUBMODULE_REPO__CHECKOUT_PATH }}
          echo "submodule's repo : ${PWD}"
          CHANGES=$(git diff --name-only ${{ env.REPO__SUBMODULE_SHA1 }}..${{ env.SUBMODULE_REPO__SHA1 }})
          echo "changes:"
          echo "$CHANGES"
          SUBDMODULE_REPO__HAS_NEW_CHANGES_IN_CHECK_DIR=$(git diff --quiet ${{ env.REPO__SUBMODULE_SHA1 }}..${{ env.SUBMODULE_REPO__SHA1 }} -- ${{ env.SUBMODULE_REPO__CHECK_DIR }} || echo yes)
          echo "SUBDMODULE_REPO__HAS_NEW_CHANGES_IN_CHECK_DIR=$SUBDMODULE_REPO__HAS_NEW_CHANGES_IN_CHECK_DIR" >> $GITHUB_ENV
          echo "SUBDMODULE_REPO__HAS_NEW_CHANGES_IN_CHECK_DIR=$SUBDMODULE_REPO__HAS_NEW_CHANGES_IN_CHECK_DIR"

      # check if there is already a PR with the same change pending (PR is open)
      # also, if PR is closed, then it means that it was closed by someone ( should we ignore this change then?)
      # if PR is merged, we wouldn't be here
      # ALSO check if there is a PR for an older revision, if so supersede with a new PR.
      - name: check if PR already exists for the same submodule rev update
        if: ${{ env.SUBDMODULE_REPO__HAS_NEW_CHANGES_IN_CHECK_DIR == 'yes' }}
        run:  |
          cd ${{ env.REPO__CHECKOUT_PATH }}
          REPO__SUBMODULE_UPDATE_PR_TITLE="[GHARIAL] bump submodule ${{ env.SUBMODULE_REPO__NAME }} from ${{ env.REPO__SUBMODULE_SHA1 }} to ${{ env.SUBMODULE_REPO__SHA1 }}"
          REPO__SUBMODULE_UPDATE_PR_TITLE_PREV="[GHARIAL] bump submodule ${{ env.SUBMODULE_REPO__NAME }} from ${{ env.REPO__SUBMODULE_SHA1 }} to "
          PR_URL=$(gh pr list --search "$REPO__SUBMODULE_UPDATE_PR_TITLE" --state 'open|closed' --json url --jq '.[] | .url')
          if [ ! -z "$PR_URL" ] ; then
            echo "PR already exists for the same submodule update: $PR_URL"
          else
            REPO__SUBMODULE_UPDATE_PR_CREATE='yes'
            echo "REPO__SUBMODULE_UPDATE_PR_CREATE=$REPO__SUBMODULE_UPDATE_PR_CREATE" >> $GITHUB_ENV
            PR_URL=$(gh pr list --search "$REPO__SUBMODULE_UPDATE_PR_TITLE_PREV" --state open --json url --jq '.[] | .url')
            if [ ! -z "$PR_URL" ] ; then
              echo "older PR already exists for the same submodule update: $PR_URL"
              echo "this PR should be superseded(closed) after creating a new one."
              REPO__SUBMODULE_UPDATE_PR_SUPERSEDE='yes'
              echo "REPO__SUBMODULE_UPDATE_PR_SUPERSEDE=$REPO__SUBMODULE_UPDATE_PR_SUPERSEDE" >> $GITHUB_ENV
              REPO__SUBMODULE_UPDATE_PR_PREV_URL=$PR_URL
              echo "REPO__SUBMODULE_UPDATE_PR_PREV_URL=$REPO__SUBMODULE_UPDATE_PR_PREV_URL" >> $GITHUB_ENV
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # if we have the interesting differences, create a PR with submodule updates
      - name: full checkout of repo if changes in specific dir of submodule to create PR
        if: ${{ env.REPO__SUBMODULE_UPDATE_PR_CREATE == 'yes' }}
        uses: actions/checkout@v2
        with:
          submodules: 'true'
          path: ./${{ env.REPO__CHECKOUT_PATH }} # using the same path as before, overwrites?
          fetch-depth: 0 # we need a full clone to update submodule rev (is this true?)

      - name: create PR if changes in specific dir of submodule
        if: ${{ env.REPO__SUBMODULE_UPDATE_PR_CREATE == 'yes' }}
        run:  |
          REPO__SUBMODULE_UPDATE_PR_BRANCH_NAME="GHARIAL-${{ env.SUBMODULE_REPO__NAME }}-${{ env.SUBMODULE_REPO__SHA1 }}"
          REPO__SUBMODULE_UPDATE_PR_TITLE="[GHARIAL] bump submodule ${{ env.SUBMODULE_REPO__NAME }} from ${{ env.REPO__SUBMODULE_SHA1 }} to ${{ env.SUBMODULE_REPO__SHA1 }}"
          cd ${{ env.REPO__CHECKOUT_PATH }}
          git checkout ${{ env.REPO__TARGET_BRANCH }}
          git pull
          git config user.name "coolbreeze413"
          git config user.email ""
          git checkout -b "$REPO__SUBMODULE_UPDATE_PR_BRANCH_NAME"
          cd ${{ env.REPO__SUBMODULE__REL_PATH }}
          git checkout ${{ env.SUBMODULE_REPO__TARGET_BRANCH }}
          git pull
          cd ..
          git status
          git add ${{ env.REPO__SUBMODULE__REL_PATH }}
          git status
          git commit -m "$REPO__SUBMODULE_UPDATE_PR_TITLE"
          git status
          git push -u origin "$REPO__SUBMODULE_UPDATE_PR_BRANCH_NAME"
          PR_BODY="Add some more details here?"
          PR_URL=$(gh pr create --title "$REPO__SUBMODULE_UPDATE_PR_TITLE" \
             --body "$PR_BODY" \
             --head "$REPO__SUBMODULE_UPDATE_PR_BRANCH_NAME" \
             --base "${{ env.REPO__TARGET_BRANCH }}" \
             )
          PR_STATUS=$?
          echo "PR_STATUS=$PR_STATUS"
          echo "PR_URL=$PR_URL"
          if [ ${{ env.REPO__SUBMODULE_UPDATE_PR_SUPERSEDE }} == 'yes' ] ; then
            gh pr comment ${{ env.REPO__SUBMODULE_UPDATE_PR_PREV_URL }} --body "superseded by $PR_URL"
            gh pr close ${{ env.REPO__SUBMODULE_UPDATE_PR_PREV_URL }} --delete-branch
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
