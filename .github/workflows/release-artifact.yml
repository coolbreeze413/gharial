name: release-artifact-on-pr

on:
  - pull_request

jobs:

  release:
    
    name: release-artifact-job
    
    runs-on: ubuntu-20.04

    env:
      IS_ARTIFACTS_CHANGED: "no"
      ENV_VAR_FOR_ALL_STEPS_IN_JOB: "blah"
    
    steps:

      - name: check out repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # we need all history, not a shallow clone for the next step

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: get changed files
        run:  |
          echo "before: ${{ github.event.pull_request.base.sha }}"
          echo " after: ${{ github.event.pull_request.head.sha }}"
          echo "ALL_CHANGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV
          echo "IS_ANY_FILE_CHANGED=$(git diff --quiet ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} || echo yes)" >> $GITHUB_ENV

      - name: list changed files
        run:  |
          echo "changed files:"
          echo ${{ env.ALL_CHANGES }}
          echo ""
          echo "are-there-changes-in-repo: ${{ env.IS_ANY_FILE_CHANGED }}"
      
      # we know that ARTIFACTS_CHANGES will have a single file like: "artifacts/gharial_artifact_21_Dec_2021_04_43_56.sh"      
      - name: get changed files in a specific directory
        run:  |
          echo "ARTIFACTS_CHANGES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- artifacts)" >> $GITHUB_ENV
          echo "IS_ARTIFACTS_CHANGED=$(git diff --quiet ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} -- artifacts || echo yes)" >> $GITHUB_ENV

      - name: list changed files in a specific directory
        run:  |
          echo "changed files in artifacts:"
          echo ${{ env.ARTIFACTS_CHANGES }}
          echo ""
          echo "are-there-changes-in-artifacts: ${{ env.IS_ARTIFACTS_CHANGED }}"


      # seems like we need to be on a branch to approve via gh cli (??)
      # so, we add a gh pr checkout in the run, before trying to
      # review with comment or approve
      - name: approve the review if there are artifact changes
        if: ${{ env.ARTIFACTS_CHANGES }} == "yes"
        shell: bash
        run:  |
          echo "artifact has changes, approve the PR."
          gh pr checkout ${{ github.event.pull_request.number }}
          GH_PR_CHECKOUT_STATUS=$?
          echo "GH_PR_CHECKOUT_STATUS=$GH_PR_CHECKOUT_STATUS"
          gh pr review --comment --body "[GHARIAL-GHA] auto approve"
          GH_PR_REVIEWC_STATUS=$?
          echo "GH_PR_REVIEWC_STATUS=$GH_PR_REVIEWC_STATUS"
          gh pr review --approve
          GH_PR_REVIEWA_STATUS=$?
          echo "GH_PR_REVIEWA_STATUS=$GH_PR_REVIEWA_STATUS"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # use explicit gh auth login...
      # - name: merge the PR if there are artifact changes
      #   if: ${{ env.ARTIFACTS_CHANGES }} == "yes"
      #   shell: bash
      #   run:  |
      #     echo "artifact has changes, merge the PR."
      #     MERGE_BODY="[GHARIAL-GHA] automatically merging latest PR for artifact"
      #     echo "MERGE_BODY=$MERGE_BODY"
      #     PR_URL=${{ github.event.pull_request.html_url }}
      #     echo "PR_URL=$PR_URL"
      #     GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
      #     echo "$GITHUB_TOKEN" | gh auth login --with-token
      #     gh pr merge $PR_URL --auto --delete-branch --squash --body "$MERGE_BODY"
      #     GH_PR_MERGE_STATUS=$?
      #     echo "GH_PR_MERGE_STATUS=$GH_PR_MERGE_STATUS"

      # use implicit gh cli login ?
      - name: merge the PR if there are artifact changes
        if: ${{ env.ARTIFACTS_CHANGES }} == "yes"
        shell: bash
        run:  |
          echo "artifact has changes, merge the PR."
          MERGE_BODY="[GHARIAL-GHA] automatically merging latest PR for artifact"
          echo "MERGE_BODY=$MERGE_BODY"
          PR_URL=${{ github.event.pull_request.html_url }}
          echo "PR_URL=$PR_URL"
          gh pr merge $PR_URL --auto --delete-branch --squash --body "$MERGE_BODY"
          GH_PR_MERGE_STATUS=$?
          echo "GH_PR_MERGE_STATUS=$GH_PR_MERGE_STATUS"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: create a release with the artifact added
        if: ${{ env.ARTIFACTS_CHANGES }} == "yes"
        shell: bash
        run:  |
          echo "create a release after merging the PR"
          git checkout master
          CURRENT_VERSION=`git describe --abbrev=0 --tags 2>/dev/null`
          if [ -z $CURRENT_VERSION ] ; then
              
              CURRENT_VERSION="v0.0.0"
              NEW_VERSION="v1.0.0"

          else

              # remove "v"
              CURRENT_VERSION_PARTS=$(echo "$CURRENT_VERSION" | sed 's/v//')
              # replace . with space so can split into an array
              CURRENT_VERSION_PARTS=(${CURRENT_VERSION_PARTS//./ })

              # get MAJOR, MINOR, PATCH
              V_MAJOR=${CURRENT_VERSION_PARTS[0]}
              V_MINOR=${CURRENT_VERSION_PARTS[1]}
              V_PATCH=${CURRENT_VERSION_PARTS[2]}

              # use custom logic to determine new MAJOR/MINOR/PATCH version numbers:
              # current we use a simple "increment minor"
              V_MINOR=$((V_MINOR+1))

              # remember to add "v"
              NEW_VERSION="v${V_MAJOR}.${V_MINOR}.${V_PATCH}"

          fi

          echo "CURRENT_VERSION=$CURRENT_VERSION"
          echo "NEW_VERSION=$NEW_VERSION"

          RELEASE_TITLE="[GHARIAL-GHA] release ${NEW_VERSION}"
          gh release create --title "$RELEASE_TITLE" --target master "$NEW_VERSION" "${{ env.ARTIFACTS_CHANGES }}"
          GH_RELEASE_STATUS=$?
          echo "GH_RELEASE_STATUS=$GH_RELEASE_STATUS"



