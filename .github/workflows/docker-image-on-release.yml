name: docker-image-on-release

# note that for this workflow to be triggered, the release needs to be created/published using a PAT
# and not the default GITHUB_TOKEN, as the GITHUB_TOKEN does not allow an event to trigger another workflow.
on:
  release:
    types:
      - published

env:
  IMAGE_NAME: gharial
  RELEASE_SCRIPT_DIR: "release-artifacts"

jobs:
  docker-image:
    name: docker-image-on-release-job
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:

    - uses: actions/checkout@v2

    - name: dump-gh-context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: build-image
      run:  |
        RELEASE_SCRIPT_DOWNLOAD_URL=${{ github.event.release.assets[0].browser_download_url }}
        RELEASE_SCRIPT_NAME=${{ github.event.release.assets[0].name }}
        RELEASE_SCRIPT_DIR=${{ env.RELEASE_SCRIPT_DIR }}
        RELEASE_VERSION=${{ github.event.release.tag_name }}
        # we can either download the release stuff using the URL (if not available in the repo itself)
        # or, if in the repo itself, use the release stuff directly as we have the repo checked out at the "release" ref already
        docker build . --file Dockerfile \
                       --tag $IMAGE_NAME \
                       --label "version=$RELEASE_VERSION" \
                       --build-arg GHARIAL_RELEASE_SCRIPT="$RELEASE_SCRIPT_DIR/$RELEASE_SCRIPT_NAME"

    - name: login-ghcr-io
      run:  |
        echo "$GITHUB_TOKEN" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: push-image-ghcr-io
      run:  |
        
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        
        # Strip git ref prefix from version (testing)
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        echo VERSION=$VERSION
        
        # Strip "v" prefix from tag name (testing)
        VERSION=$(echo $VERSION | sed -e 's/^v//')
        echo VERSION=$VERSION
        
        # Use Docker `latest` tag convention
        # we currently only push this one, and don't push docker images for each version
        VERSION=latest
        
        echo
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        
        docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
        
        docker push $IMAGE_ID:$VERSION


